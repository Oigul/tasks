#include <iostream>
#include <vector>
#include <chrono>

void printArray(int *array, const int n);
void insertionSort(int *array, const int n);
void mergeSort(int *array, const int n, int left, int right);
std::string result(double timeInsertionSort, double timeMergeSort);
int searchMax(int *array, const int n);

// As far as I remember we can use time_t (#include <time.h>) instead of the class specifically for the timer.
class Timer
{
private:
    // Псевдонимы типов
    using clock_t = std::chrono::high_resolution_clock;             // таймер с минимально возможным периодом отсчетов, доступным системе
    using second_t = std::chrono::duration<double, std::ratio<1> >; // тактовый период в 1 секунду

    // std::chrono::time_point представляет точку во времени.
    // clock_t - тип
    std::chrono::time_point<clock_t> m_beg;

public:
    //now - получить текущее время
    Timer() : m_beg(clock_t::now())
    {
    }

    void reset()
    {
        m_beg = clock_t::now();
    }

    double elapsed() const
    {
        return std::chrono::duration_cast<second_t>(clock_t::now() - m_beg).count();
    }
};

//I'd like to see right here the file which is being created by your programm and filled by random().
// When the file will be filled you can read the numbers from there. You can create file every time
// when you run your programm.
int main()
{
    Timer t;

    const int size = 1280;
    int array[size] = {1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                       1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20};
    //std::cout << "print array1" << std::endl;
    //printArray(array, size);

    double time1 = t.elapsed();
    insertionSort(array, size);
    double time2 = t.elapsed();
    double timeInsertionSort = time2 - time1;
    std::cout << "Time insertionSort: " << timeInsertionSort << '\n';
    //std::cout << "insertionSort" << std::endl;
    //printArray(array, size);
    std::cout << std::endl;


    int array2[size] = {1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,
                        1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20,1,2,14,3,4,6,20,9,10,11,18,12,17,14,15,13,16,7,19,20};
    //std::cout << "print array2" << std::endl;
    //printArray(array2, size);

    time1 = t.elapsed();
    mergeSort(array2, size, 0, size);
    time2 = t.elapsed();
    double timeMergeSort = time2 - time1;
    std::cout << "Time mergeSort: " << timeMergeSort << '\n';
    //std::cout << "mergeSort" << std::endl;
    //printArray(array2, size);

    std::cout << std::endl;
    std::cout << result(timeInsertionSort, timeMergeSort) << std::endl;

    return 0;
}

void printArray(int *array, const int n)
{
    //cout << "printArray" << endl;
    for (int i = 0; i < n; ++i)
    {
        std::cout << array[i] << " ";
    }
    std::cout << std::endl;
}

void printVector(std::vector<int> tmp, const int n)
{
    //std:cout << "printArray" << std:endl;
    for (int i = 0; i < n; ++i)
    {
        std::cout << tmp[i] << " ";
    }
    std::cout << std::endl;
}

std::string result(double timeInsertionSort, double timeMergeSort)
{
    if (timeMergeSort < timeInsertionSort)
    {
        return "Merge sort is faster than insert sort ";
    }
    else
        return "Insert sort is faster than merge sort";
}

int searchMax(int *array, const int n)
{
    double max = array[0];
    for (int i = 1; i < n; ++i)
    {
        if(array[i] > max)
            max = array[i];
    }
    return max;
}

void insertionSort(int *array, const int n)
{
    //std::cout << "insertionSort" << std::endl;
    for (int j = 1; j < n; ++j)
    {
        int key = array[j];
        int i = j-1;

        while(i > 0 && array[i] > key)
        {
            array[i+1] = array[i];
            --i;
        }
        array[i+1] = key;
    }
}

void mergeSort(int *array, const int n, int left, int right)
{
    //std::cout << "mergeSort" << std::endl;

    if (left < right) //граничное условие
    {
        int middle = (left + right) / 2;
        mergeSort(array, n, left, middle);
        mergeSort(array, n, middle + 1, right);

        int n1 = middle - left + 1;
        int n2 = right - middle;
        std::vector<int> tmpLeft;
        std::vector<int> tmpRight;
        for(int i = 0; i < n1; ++i)
            tmpLeft.push_back(array[left+i]);

        for(int i=0; i < n2; ++i)
        {
            if(middle + i + 1 < n)
                tmpRight.push_back(array[middle+i+1]);
        }

        /*int max = searchMax(array, n);
        tmpLeft.push_back(max+1);
        tmpRight.push_back(max+1);*/
        tmpLeft.push_back(100);
        tmpRight.push_back(100);

        int i = 0;
        int j = 0;
        for(int k = left; k <= right; ++k)
        {
            if(tmpLeft[i] <= tmpRight[j])
            {
                array[k] = tmpLeft[i];
                ++i;
            } else
            {
                array[k] = tmpRight[j];
                ++j;
            }
        }
    }
}
